package com.scs.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.scs.dao.UserDAO;
import com.scs.model.UserRole;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * This Service is used to serve to user related query Authors : Nikhil
 */

@Service(value = "userServiceDetails")
public class UserServiceDetails implements UserDetailsService {

	@Id
	String id;
	String name;
	String password;
	String email;
	boolean isActive;
	List<UserRole> role;
	String createdBy;
	Date createdDate;
	String modifiedBy;
	Date modifiedDate;
	@Resource
	private UserDAO userRepositoryDao;
	@Autowired
	public MongoTemplate mongoTemplate;
	private final Logger logger = LoggerFactory.getLogger(getClass());

	private org.springframework.security.core.userdetails.User userdetails;

	@Override
	public UserDetails loadUserByUsername(String username)
			throws UsernameNotFoundException {
		boolean enabled = true;
		boolean accountNonExpired = true;
		boolean credentialsNonExpired = true;
		boolean accountNonLocked = true;
		com.scs.model.User user = getUserDetail(username);

		userdetails = new User(user.getUsername(), user.getPassword(), enabled,
				accountNonExpired, credentialsNonExpired, accountNonLocked,
				getAuthorities(user.getRole()));
		return userdetails;
	}

	public List<GrantedAuthority> getAuthorities(String role) {
		List<GrantedAuthority> authList = new ArrayList<GrantedAuthority>();
		if ("ADMIN".equalsIgnoreCase(role)) {
			authList.add(new SimpleGrantedAuthority("ADMIN"));

		} else {
			authList.add(new SimpleGrantedAuthority("ROLE_CAMPAIGN"));
		}
		System.out.println(authList);
		return authList;
	}

	public com.scs.model.User getUserDetail(String username) {
		com.scs.model.User user = userRepositoryDao.findByUsername(username);
		return user;
	}
}
