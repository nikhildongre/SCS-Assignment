package com.scs.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

 




import com.scs.dao.UserDAO;
import com.scs.model.UserRole;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;

 

@Service(value="userServiceDetails")
public class UserServiceDetails implements   UserDetailsService {

	 @Id
	  String id ;
	  String name;
	  String password ;
	  String email   ;
	  boolean isActive ;
	  List<UserRole> role  ;
	  String createdBy ;
	  Date createdDate   ;
	  String modifiedBy  ;
	  Date modifiedDate  ;	
	  @Resource
	  private UserDAO userRepositoryDao;
	  @Autowired
	  public MongoTemplate mongoTemplate;  
	  private final Logger logger = LoggerFactory.getLogger(getClass());
	    
	private org.springframework.security.core.userdetails.User userdetails;
	
	@Override
	public UserDetails loadUserByUsername(String username)
            throws UsernameNotFoundException {
        boolean enabled = true;
        boolean accountNonExpired = true;
        boolean credentialsNonExpired = true;
        boolean accountNonLocked = true;
        com.scs.model.User user = getUserDetail(username);
        System.out.println(username);
        
         System.out.println(user.getPassword());
          System.out.println(user.getUsername());
           System.out.println(user.getRole());
            
            userdetails = new User(user.getUsername(), 
					   user.getPassword(),
     			   enabled,
     			   accountNonExpired,
     			   credentialsNonExpired,
     			   accountNonLocked,
     			   getAuthorities(user.getRole()));
            return userdetails;
           // return null;
    }

	
	  public List<GrantedAuthority> getAuthorities(String role) {
	        List<GrantedAuthority> authList = new ArrayList<GrantedAuthority>();
	        if ("ADMIN".equalsIgnoreCase(role)) {
	            authList.add(new SimpleGrantedAuthority("ADMIN"));

	        } else {
	            authList.add(new SimpleGrantedAuthority("ROLE_CAMPAIGN"));
	        }
	        System.out.println(authList);
	        return authList;
	    }

	 public com.scs.model.User getUserDetail(String username) {
		/* BasicQuery query1 = new BasicQuery("{ username : '"+username+"' }");
		 com.scs.model.User user = mongoTemplate.findOne(query1,com.scs.model.User.class);
		 System.out.print(mongoTemplate.findAll(com.scs.model.User.class).toString());
		 System.out.print(user.toString());*/
		 com.scs.model.User user = userRepositoryDao.findByUsername(username);
		// List<com.scs.model.User> userList = (List<com.scs.model.User>) userRepositoryDao.findAll();
		// ScsUser user = userRepositoryDao.findById("1");
	        //System.out.println(user.toString());
	        return user;
	    }
}
